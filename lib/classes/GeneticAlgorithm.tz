@use Object.
@use NetworkServer.

@define GENETIC_ALGORITHM_SERVER_PORT 59142.

Object : GeneticAlgorithm {
	% The GeneticAlgorithm class allows you to set up a genetic algorithm, 
	% in which strategies can be evolved to solve a wide variety of problems.
	% <P>
	% To run a genetic algorithm, you will need to a create custom subclass
	% of this object, GeneticAlgorithm, and of its companion object 
	% OBJECT(GeneticAlgorithmIndividual).
	% <P>
	% Your subclass of GeneticAlgorithm must implement two important methods:	
	% METHOD(start-fitness-test) and METHOD(end-fitness-test).  These methods
	% are automatically called at the beginning and end of the fitness tests	
	% respectively.

	+ variables:
		populations (list).
		testDuration (double).
		tournamentSize (int).
		populationSize (int).
		individualClass (string).
		currentPopulation (int).
		currentIndividual (int).
		preserveBest (int).

#		crossoverPercent (int).
#		mutationPercent (int).
#		randomizePercent (int).
#		migrationPercent (int).

		variers (hash).

		migrationHosts (list).
		migrationServer (object).
		migrationPort (int).
		transferIn (object).
		transferOut (object).
		generation (int).
		generationLimit (int).
		seed (object).
		bestFitness (float).
		spatialRadius (int).

	+ to dearchive:
		# we'll need to retest the current individual.
		currentIndividual--.

		# reschedule a switch, but don't do it now -- we will need to be fully dearchived.

		self schedule method-call "switch-individual" at-time (controller get-time) + 0.1.

		return 1.
		
	+ to init:
		testDuration = 20.
		populationSize = 30.
		currentIndividual = 0.
		preserveBest = 0.

		#mutationPercent = 75.
		#migrationPercent = 0.
		#crossoverPercent = 10.
		#randomizePercent = 5.

		variers{ "mutate-individual" } = 0.75.
		variers{ "crossover-individual" } = 0.0.
		variers{ "copy-individual" } = 0.0.
		variers{ "randomize-individual" } = 0.0.
		variers{ "migrate-individual" } = 0.0.

		tournamentSize = 5.
		spatialRadius = 0.
		migrationPort = GENETIC_ALGORITHM_SERVER_PORT.

		populations = { { }, { } }.

		self prepare-for-generation number 0.

	+ section "Getting and Setting Parameters for the Genetic Algorithm"

	+ to enable-preserve-best:
	  % Always keep the best individual from the previous generations?
	  preserveBest = 1.
	
	+ to disable-preserve-best:
	  preserveBest = 0.

	+ to set-fitness-test-duration to duration (double):
		% Sets the duration of a single fitness test.  Specifies that a single
		% individual should be allowed to run for duration simulated seconds 
		% before assessing its fitness and switching to the next individual.
		% The default value is 20.
		testDuration = duration.

	+ to get-fitness-test-duration:
		% Returns the duration of a single fitness test.  This value can be
		% set with the method METHOD(set-test-duration).  The default value
		% is 20.
		return testDuration.
		
	+ to set-seed-individual to theSeed (object):
		% The seed individual is used to start the genetic algorithm
		% at a specfic location in the search space by using the seed
		% individual's paramters as a starting point.

		seed = theSeed.

	- to set-spatial-radius to n (int):
		% Undocumented: it will be our little secret!
		spatialRadius = n.

	- to get-spatial-radius:
		return spatialRadius.
	
	+ to set-population-size to size (int):
		% Sets the number of individuals in the population to size.
		populationSize = size.

	+ to get-population-size:
		% Returns the size of the population.  The default value is 30, and
		% can be set with METHOD(set-population-size).
		return populationSize.

	+ to set-mutation-percent to percent (int): 
		% Sets the probability of mutation to percent%.  This specifies the 
		% approximate percentage of agents to be generated through mutation.
		% The default value is 75%. 
		variers{"mutate-individual"} = percent / 100.0.

	+ to get-mutation-percent:
		% Returns the percent probability of mutation during reproduction.
		% The default value is 75%.
		%return mutationPercent.
		return variers{"mutate-individual"} * 100.

	+ to set-randomize-percent to percent (int): 
		% Sets the probability of creating a new random individual to percent%.  
		% The default value is 5%.
		variers{"randomize-individual"} = percent / 100.0.

	+ to get-randomize-percent:
		% Returns the percent probability of a new random individual during reproduction.
		% The default value is 5%.
		return variers{"randomize-individual"} * 100.

	+ to set-crossover-percent to percent (int):
		% Sets the probability of crossover to percent%.  This specifies the 
		% approximate percentage of agents to be generated through crossover
		% during reproduction.  Crossover is not enabled by default, so the 
		% default value is 0%.
		variers{"crossover-individual"} = percent / 100.0.

	+ to get-crossover-percent:
		% Returns the probability of crossover during reproduction.
		return variers{"crossover-individual"} * 100.
	
	+ to set-migration-port to port (int):
		% Sets the port on which migration should occur.  The default value of 
		% 59142 typically does not need to be changed.

		migrationPort = port.

	+ to set-migration-percent to percent (int):
		% Sets the probability of migration to percent%.  This specifies the 
		% approximate percentage that individuals will migrate to another host
		% during reproduction, if migration is enabled and migration hosts are
		% specified using METHOD(set-migration-hosts).
	
		if percent == 0:
			free migrationServer.
		else:
			if !migrationServer:
			{
				migrationServer = new NetworkServer.
				migrationServer listen on-port migrationPort.
				migrationServer set-upload-recipient to self.
			}
			transferOut = new GAIndividualTransporter.
			
			variers{"migrate-individual"} = percent / 100.0.
			
	+ to get-migration-percent:
		return variers{"migrate-individual"}.
		
	+ to set-migration-hosts to hosts (list):
		% Sets a list of migration hosts for this object.  This should be a list of lists 
		% where sub-lists are (string, integer) for hostname, hostport for other machines
		% running a genetic algorithm with the same simulation.

		migrationHosts = copylist hosts.
			
	+ to set-tournament-size to tsize (int):
		% Sets the tournament size to tsize.  The tournament size specifies
		% how many individuals are considered in a single selection "tournament".
		% The larger the tournament size, the more competative selection becomes.
		% The default value is 5.  
		tournamentSize = tsize.

	+ to get-tournament-size:
		% Returns the tournament size.  The tournament size specifies
		% how many individuals are considered in a single selection "tournament".
		% The larger the tournament size, the more competative selection becomes.
		% The tournament size can be set with METHOD(set-tournament-size).
		% The default value is 5.  
		return tournamentSize.

	+ to set-individual-class to className (string):
		% Call this method to specify the class representing an individual in your
		% genetic algorithm.  className must be a string representing a subclass
		% of OBJECT(GeneticAlgorithmIndividual).

		individualClass = className.

	+ to set-generation-limit to newLimit (int):
		% Sets the generation limit to newLimit.  The simulation will end after
		% newLimit generations have passed.  If newLimit is 0, then the 
		% generation limit is disabled.

		generationLimit = newLimit.

	+ to get-generation-limit:
		% Returns the generation limit.  See METHOD(get-generation-limit) for 
		% details.
		return generationLimit.

	+ to get-generation: 
		% Returns the current generation.  The generation count begins at 0.
		return generation.

	+ to get-best-fitness:
		% Returns the best fitness seen so far.
		return bestFitness.

	+ to get-best-individual:
		% Returns the best active individual.  Note that at the end of each generation
		% any individual, including the best, may be deleted and replaced with a new 
		% one, so be careful when this method is called and how it is used.  

		i (object).
		best (object).

		foreach i in populations{ currentPopulation }: {
			if !best || ( best get-fitness ) < ( i get-fitness ):
				best = i.
		}

		print best.

		return best.

	+ to get-current-individual-index:
		% Returns the index of the individual currently being tested.  Returns -1
		% before any fitness tests have been run.
		% See also METHOD(get-current-individual).
		return currentIndividual.

	+ to get-current-individual:
		% Returns the current GeneticAlgorithmIndividual subclass instance being evaluated.
		% See also METHOD(get-current-individual-index).

		if | populations{ currentPopulation } | == 0: self generate-population.

		if currentIndividual == -1: return 0.

		return populations{ currentPopulation }{ currentIndividual }.

	+ to iterate:
		if | populations { 0 } | == 0: self generate-population.		

	+ section "Methods Used Internally by the Genetic Algorithm"

	- to generate-population:
		n (int).
		newI (object).

		if populations{ 0 }: free populations{ 0 }.
		if populations{ 1 }: free populations{ 1 }.

		if individualClass == "": die "A GeneticAlgorithmIndividual subclass must be specified using the method \"set-individual-class\"".

		populations = { { }, { } }.

		for n = 0, n < populationSize, n++ : {
			newI = (controller make-new-instance of-class individualClass).
			push newI onto populations{ 0 }.
			self add-dependency on newI.

			newI = (controller make-new-instance of-class individualClass).
			push newI onto populations{ 1 }.
			self add-dependency on newI.
		}

		self set-ga-in-individuals population 0.
		self set-ga-in-individuals population 1.

		if seed: populations{ 0 }{ 0 } copy from seed.
		
		currentIndividual = -1.
		self switch-individual.

	- to set-ga-in-individuals population n (int):
	  i (int).


	  for i = 0, i < | populations{ n } |, i++: {		    
	    populations{n}{i} set-ga to self.
	  }

	+ to switch-individual: 
		% Switches to the next indivisual

		if currentIndividual != -1: {
			self end-fitness-test of populations{ currentPopulation }{ currentIndividual }.

			if (populations{ currentPopulation }{ currentIndividual } get-fitness) > bestFitness: {
				bestFitness = (populations{ currentPopulation }{ currentIndividual } get-fitness).
			}
		}

		currentIndividual++.

		if currentIndividual >= | populations{ currentPopulation } |: {
			self end-generation number generation.
			self reproduce.
			self prepare-for-generation number generation.
		}

		self start-fitness-test of populations{ currentPopulation }{ currentIndividual }.

		# self unschedule method-call "switch-individual".

		# Allow the fitness test to schedule this call
		if testDuration > 0: {
		   self schedule method-call "switch-individual" at-time (controller get-time) + testDuration.		
		}

	+ to compare-individuals ind-a a (object) int-b b (object):
	     	% Used to sort the population. We sort in descending order.
		if (a get-fitness) > (b get-fitness): return -1.
		else if (a get-fitness) < (b get-fitness): return 1.
		else: return 0.

	+ to mutate-individual at i (int): 
	        populations{ !currentPopulation }{ i } copy from (self tournament-select for-index i).
		populations{ !currentPopulation }{ i } mutate.	     	

	+ to crossover-individual at i (int):
	        populations{ !currentPopulation }{ i } crossover 
			     from-parent1 (self tournament-select for-index i) from-parent2 (self tournament-select for-index i).

	+ to copy-individual at i (int):
	        #ind (int).
		#ind = (self tournament-select for-index i).
		#populations{ !currentPopulation }{ i } copy from ind.
		populations{ !currentPopulation }{ i } copy from populations{ currentPopulation }{ i }.

	+ to randomize-individual at i (int):
	     	populations{ !currentPopulation }{ i } randomize.	

	+ to migrate-individual at i (int):
	        ind (int).
		if transferIn: {
		        print "Immigrants coming in.".
			if (transferIn get-individual number i):
				ind = (transferIn get-individual number i).
			else:
				ind = (self tournament-select for-index i).					
		}
		else:
		{
			ind = (self tournament-select for-index i).
		}

		populations{ !currentPopulation }{ i } copy from ind.				

	- to reproduce:
		r, i, best, n, v (int).
		totalFitness, fitness (double).
		ind (object).
		recipientHost (string).
		recipientPort (int).
		currentBest (object).
		key (string).

		# Initialize next population
		if | populations{ !currentPopulation } | != populationSize: {
			free populations{ !currentPopulation }.
			populations{ !currentPopulation } = populationSize new individualClass.
		}

		# Find best and other population-wide checks
		best = 0.
		for i = 0, i < | populations{ currentPopulation } |, i++: {
			fitness = (populations{ currentPopulation }{ i } get-fitness).

			if fitness > (populations{ currentPopulation }{ best } get-fitness): best = i.

			totalFitness += fitness.
		}

		totalFitness /= | populations{ currentPopulation } |.
		
		generation++.

		self report at-generation generation 
			with-best-individual populations{ currentPopulation }{ best }
			with-average-fitness totalFitness.

		# Crossover should use fitness proportional roulette.

		for i = 0, i < | populations{ currentPopulation } |, i++: {		    
		    if i == best && preserveBest: {
		      self call-method named "copy-individual" with-arguments {i}.
		    } else: {
		      r = random[1.0].

		      foreach key in keys( variers ): {
		        if r < variers{ key }: 	   self call-method named key with-arguments {i}.
			else:  		       	   r -= variers{ key }.		  
		      }
		    }
		}

		# Migration after reproduction
		if | migrationHosts | != 0: {
		        if !transferOut:
		          transferOut = new GAIndividualTransporter. 
			transferOut clear.


			for n=0, n<populationSize * (variers{"migrate-individual"} / 100.0), n++:
				transferOut add individual (self tournament-select for-index n).

			print "Migrating individuals...".
			recipientHost = migrationHosts{ random[ | migrationHosts | - 1 ] }{0}.
			recipientPort = migrationHosts{ random[ | migrationHosts | - 1 ] }{1}.
			transferOut send-over-network to recipientHost on recipientPort.
		}

		currentBest = populations{ currentPopulation }{ best }.		
		
		currentPopulation = !currentPopulation.
		self set-ga-in-individuals population currentPopulation.
		currentIndividual = 0.

		if generationLimit && generation >= generationLimit: controller end-simulation.

	+ to tournament-select for-index i (int):
		if spatialRadius == 0: return (self non-spatial-tournament-select).
		else return (self spatial-tournament-select with-index i).

	- to spatial-tournament-select with-index index (int): 
		n (int).
		best, test (int).

		best = index + (random[2 * spatialRadius - 1] - spatialRadius).
		if best >= populationSize: best -= populationSize.
		if best < 0: best += populationSize.

		for n=0, n<(tournamentSize - 1), n++: {
			test = index + (random[2 * spatialRadius - 1] - spatialRadius).
			if test >= populationSize: test -= populationSize.
			if test < 0: test += populationSize.

			if (populations{ currentPopulation }{ test } get-fitness) > 
					(populations{ currentPopulation }{ best } get-fitness): { 
				best = test.
			}
		}

		return populations{ currentPopulation }{ best }.

	- to non-spatial-tournament-select:
		% This method performs a tournament selection for reproduction.  It 
		% is used internally and typically not called by any other object.  

		n (int).
		best, test (int).

		best = random[ | populations{ currentPopulation } | - 1 ].

		for n=0, n<(tournamentSize - 1), n++: {
			test = random[ | populations{ currentPopulation } | - 1 ].

			if (populations{ currentPopulation }{ test } get-fitness) > 
					(populations{ currentPopulation }{ best } get-fitness): { 
				best = test.
			}
		}

		return populations{ currentPopulation }{ best }.

	+ section "Methods for Cluster Migration"
	
	+ to accept-upload of migrants (object) from other (string):
		free transferIn.
		transferIn = migrants.
	
	+ section "Methods to Override in Custom Subclasses"

	+ to report at-generation generation (int) with-best-individual bestIndividual (object) with-average-fitness fitness (double):
		% Prints out a report of the progress at each generation, with the most 
		% fit object passed in as bestIndividual.  The default implementation of 
		% this method simply prints out the generation number, best fitness and 
		% calls METHOD(examine) on the best individual, but you may override the 
		% method to print out any other desired information.

		bf (double).

		bf = (bestIndividual get-fitness).

		print "### Generation $generation; average fitness: $fitness; best fitness: $bf".
		self examine individual bestIndividual.

	+ to examine individual currentIndividual (object):
		% Called automatically during each generation's report, this method examines
		% and outputs information about an individual in the population.  The default
		% implementation simply prints out the object variable, but you may override 
		% this method to print out more information about the individual.
		print currentIndividual.

	+ to start-fitness-test of individual (object):
		% Implement this method to perform any setup necessary when the 
		% fitness test begins.

	+ to end-fitness-test of individual (object):
		% In this method, you should perform any cleanup neccessary when the 
		% fitness test ends.  You should also make sure that the individual's
		% fitness value is set using 
		% OBJECTMETHOD(GeneticAlgorithmIndividual:set-fitness).

	+ to end-generation number n (int):
		% This method is called right when the generation is finished, 
		% before any of the reproduction takes place.  This method provides
		% an opportunity to examine the entire population of the generation
		% after all fitness tests are run, and before the individuals are 
		% possibly destroyed through reproduction.

	+ to prepare-for-generation number n (int):
		% This method is called when a generation is setup.  The default
		% implementation does nothing, but the method may be overriden
		% in order to carry out any preparations necessary for a new 
		% generation.
}

Object : GeneticAlgorithmIndividual {
	% This object represents a single individual in a OBJECT(GeneticAlgorithm).
	% To use the class OBJECT(GeneticAlgorithm), you must also implement a 
	% custom subclass of this class.  Your custom subclass should contain the
	% variables which will represent the genes for the genetic algorithm, and
	% must also implement a few methods used for genetic operators.
	% <P>
	% At a very minimum, you must implement your own versions of the methods
	% METHOD(compute-fitness), METHOD(copy) and METHOD(mutate).  If you intend 
	% to use the crossover 
	% genetic operator, you must also implement the method METHOD(crossover).
	% If these methods are not implemented by your subclass, the object will
	% trigger a runtime error.

	+ variables:
		fitness (double).
		ga (object).

	+ to get-ga:
	  return ga.

	+ to set-ga to newGA (object):
	  ga = newGA.

	+ to init:
		# self enable-auto-free.

	+ to get-fitness:
		% Returns the fitness value associated with this individual, which
		% has been previously assigned using METHOD(set-fitness).

		return fitness.

	+ to set-fitness to fitnessValue (double):
		% Assigns a fitness value to this individual.  This method should be
		% called by the user at the end of the fitness test.

		fitness = fitnessValue.

	+ section "Methods to Override in Custom Subclasses"

	+ to copy from otherIndividual (object):
		% Implement this method to copy the genes from otherIndividual.  This method
		% must be implemented by your subclass.

		die "The method \"copy\" must be implemented in your GeneticAlgorithmIndividual subclass!".

	+ to mutate:
		% Implement this method to mutate the genes of this object.  This method
		% must be implemented by your subclass.

		die "The method \"mutate\" must be implemented in your GeneticAlgorithmIndividual subclass!".

	+ to randomize:
		% Implement this method to randomize the genes of this object.  This method
		% must be implemented by your subclass.

		die "The method \"randomize\" must be implemented in your GeneticAlgorithmIndividual subclass!".

	+ to crossover from-parent1 parent1 (object) from-parent2 parent2 (object):
		% Implement this method to make this object become a crossover of parent1 
		% and parent2.  This method must be implemented by your subclass if 
		% crossover is enabled.

		die "The method \"crossover\" must be implemented in your GeneticAlgorithmIndividual subclass!".
}

Object : GAIndividualTransporter {

	+ variables:
		individuals (list).
		
	- to add individual i (object):
		push i onto individuals.
		
	- to clear:
		individuals = {}.
		
	- to get-individual number n (int):
		if n < | individuals | : return individuals{n}.

}

GeneticAlgorithm : LPSGeneticAlgorithm {
        + variables:
	        % Parameters
	        numberLevels (int).
		numberCalibrationGens (int).
		numberGensExch (int).
		numberGensUpdate (int).

		levelThresholds (list).
		attribute (string).

	+ to init:
	        numberLevels = 2.	
		numberCalibrationGens = 5.	
		numberGensExch = 2.
		numberGensUpdate = 1.
		attribute = "fitness".# = AHFS "age". = ALPS "none". = Islands
}