@use Real.
@use Shape.
@use MenuItem.

Real : Mobile (aka Mobiles) [version 2.2] {
	% Mobile objects are objects in the simulated world which move around 		
	% and interact with other objects.  This is in contrast to 
	% OBJECT(Stationary) objects which can collide and interact with 
	% other objects but which never move.
	% <P>
	% When a Mobile object is created, it will be by default a simple 
	% sphere.  You can change the appearence of this sphere by using
	% methods in this class, or its parent class OBJECT(Real).  Or 
	% you can change the shape altogether with the method METHOD(set-shape).

	+ variables:
		archiveVelocity (vector).
		archiveRvelocity (vector).
		archiveAcceleration (vector).

		linkForce, linkTorque (vector).

		physicsEnabled (int).

	+ to init:
		e = .2.
		mu = .2.

		realWorldPointer = linkNew().
		linkAddToWorld( realWorldPointer ).

		self set-shape to (controller get-generic-shape).

	- to get-link-pointer:
		% For internal use only.

		return realWorldPointer.

	- to register with-shape theShape (object):
		% Deprecated.  Don't use.
		print "warning: the method \"register\" of Mobile is deprecated, use the method \"set-shape\" instead".

		self set-shape to theShape.

	- to set shape theShape (object):
		% Deprecated.  Don't use.
		print "warning: the method \"set\" of Mobile is deprecated, use the method \"set-shape\" instead".

		self set-shape to theShape.

  + section "Configuring Physics Parameters"

	+ to enable-physics:
		% Enables physical simulation for a OBJECT(Mobile) object.  
		% This must be used in conjunction with a 
		% OBJECT(PhysicalControl) object which sets up physical 
		% simulation for the entire world.  
		% <p>
		% When physics is enabled for an object, the acceleration 
		% can no longer be assigned manually--it will be computed 
		% from the forces applied to the object.

		physicsEnabled = 1.
		linkSetPhysics( realWorldPointer, 1).

	+ to disable-physics:
		% Disables the physical simulation for a OBJECT(Mobile) object.

		physicsEnabled = 0.
		linkSetPhysics(realWorldPointer, 0).

	- to suspend-physics:
		linkSetPhysics(realWorldPointer, 0).

	- to resume-physics:
		linkSetPhysics(realWorldPointer, physicsEnabled).

	+ to get-mass: 
		% Returns the mass of the object.

		return (collisionShape get-mass).

  + section "Controlling the Agent's Motion and Position (see also methods in the parent class, OBJECT(Real))"
	- to rotate around-axis thisAxis (vector) by amount (float):
		% Deprecated.  Renamed to METHOD(set-rotation).

		self set-rotation around-axis thisAxis by amount.

	+ to relative-rotate around-axis thisAxis (vector) by amount (float):
		% Sets the rotation of this object around vector axis thisAxis 
		% by scalar amount (in radians).  This is a rotation relative to the 
		% current position.

		length (float).

		# normalize the axis

		length = |thisAxis|.

		linkRotateRelative(realWorldPointer, thisAxis, amount).

	+ to offset by amount (vector):
		% Moves this object by amount, relative to its current position.

		self move to (self get-location) + amount.

	+ to set-acceleration to newAcceleration (vector):
		% Sets the acceleration of this object to newAcceleration.
		% This method has no effect if physical simulation is turned 
		% on for the object, in which case the physical simulation 
		% engine computes acceleration.

		linkSetAcceleration(realWorldPointer, newAcceleration).

	+ to set-max-angular-speed to newMax (float):
	        % Sets the maximum angular speed of this object. This can
		% be used to avoid out of control objects.

		linkSetMaxAngularSpeed(realWorldPointer, newMax).

	+ to set-rotational-acceleration to newAcceleration (vector):
		% Sets the rotational acceleration of this object to 
		% newAcceleration.  This method has no effect if physical 
		% simulation is turned on for the object, in which case the 
		% physical simulation engine computes acceleration.

		linkSetRotationalAcceleration(realWorldPointer, newAcceleration).

	+ to get-acceleration:
		% Returns the vector acceleration of this object.

		return linkGetAcceleration(realWorldPointer).

	+ to set-velocity to newVelocity (vector):
		% Sets the velocity of this object to newVelocity.

		if !realWorldPointer: {
			print "set-velocity called with uninitialized Mobile object".
			return.
		}

		linkSetVelocity(realWorldPointer, newVelocity).

	+ to set-force to newForce (vector):
		% Sets the velocity acting on the object to newForce.  This 
		% force will remain in effect until it is disabled with a 
		% new call to METHOD(set-force).

		if !realWorldPointer: {
			print "set-force called with uninitialized Mobile object".
			return.
		}

		linkForce = newForce.

		linkSetForce(realWorldPointer, linkForce).

	+ to get-force:
		% Returns the force acting on the object, which was previously 
		% set using METHOD(set-force).  

		return linkForce.

	+ to set-torque to newTorque (vector):
		% Sets the torque acting on the object to newTorque.  This 
		% torque will remain in effect until it is disabled with a 
		% new call to METHOD(set-torque).

		if !realWorldPointer: {
			print "set-torque called with uninitialized Mobile object".
			return.
		}

		linkTorque = newTorque.

		linkSetTorque(realWorldPointer, linkTorque).

	+ to get-torque:
		% Returns the torque acting on the object, which was previously 
		% set using METHOD(set-torque).  

		return linkTorque.

	+ to set-rotational-velocity to angularVelocity (vector):
		% Sets the rotational velocity of this object to 
		% angularVelocity.

		linkSetRotationalVelocity(realWorldPointer, angularVelocity).

	+ to get-velocity:
		% Returns the vector velocity of this object.

		return linkGetVelocity(realWorldPointer).

	+ to get-rotational-velocity:
		% Returns the vector angular velocity of this object.

		return linkGetRotationalVelocity(realWorldPointer).

	+ to get-distance from otherObject (object):
		% Returns the scalar distance from this object's center to 
		% otherObject.

		return | (self get-location) - (otherObject get-location) |.

	+ to transform world-vector theVector (vector):
		% Transforms theVector in the world coordinate frame to a 
		% vector in the frame of this object.  

		return vectorFromLinkPerspective(realWorldPointer, theVector).

	+ to get-bound-maximum:
		% Returns the vector representing the maximum X, Y and Z locations of
		% points on this link.

		return linkGetMax(realWorldPointer).

	+ to get-bound-minimum:
		% Returns the vector representing the minimum X, Y and Z locations of
		% points on this link.

		return linkGetMin(realWorldPointer).


  + section "Changing an Object's Appearence"

	+ to set-label to theLabel (string):
		% Sets the label to be drawn along side the object.

		linkSetLabel(realWorldPointer, theLabel).

	+ to remove-label:
		% Removes the label that would be drawn next to an object.
		linkRemoveLabel(realWorldPointer).

	- to archive:
		archiveVelocity = (self get-velocity).
		archiveRvelocity = (self get-rotational-velocity).
		archiveAcceleration = (self get-acceleration).

		return (super archive).

	- to dearchive:
		realWorldPointer = linkNew().

		linkAddToWorld(realWorldPointer).

		self set-velocity to archiveVelocity.
		self set-rotational-velocity to archiveRvelocity.
		self set-acceleration to archiveAcceleration.

		if physicsEnabled: 
			self enable-physics.
		else: 
			self disable-physics.


		return (super dearchive).

  + section "Determining Whether an Object is Colliding"

	- to check-for-penetrations:
		% Depricated.
		return (self get-colliding-objects).

	+ to get-colliding-objects:
		% Returns a list of objects currently colliding with this object.
		% This is not meant as a general purpose collision
		% detection tool -- it is meant to detect potentially troublesome
		% configurations of links when they are created.

		return linkGetPenetratingObjects(realWorldPointer).

	+ to check-for-self-penetrations:
		% Determines whether this link is currently penetrating with other links
		% in the same multibody.  This is not meant as a general purpose collision
		% detection tool -- it is meant to detect potentially troublesome
		% configurations of links when they are created.

		return linkCheckSelfPenetration(realWorldPointer).
}
