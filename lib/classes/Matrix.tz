#
#
#

@use Object.
@use Image.

Object : Matrix (aka Matricies) [version 2.0] {
	% Matrix2D objects store an arbitrary sized 2D grid of arbitrary floating 
	% point data.
	% <P>
	% Several of these matrix operations are built on top of the BLAS library
	% and may be hardware accelerated on certain processors if the platform
	% provides a hardware accelerated BLAS library.  In particular, AltiVec 
	% acceleration is provided on G4 processors with Mac OS X.  
	% <P>
	% Hardware accelerated methods sometimes preform multiple operations 
	% simultaneously for the same computational cost.  The METHOD(add)
	% operation, for example, also scales one of the matrices being added.
	% When using these methods, it is often beneficial to structure code
	% to take advantage of all of the operations preformed.  It is far 
	% more efficient to scale and add a matrix simultaneously using METHOD(add)
	% than to first scale using METHOD(scale) and then add using METHOD(add).
	% <P>
	% Technical note: matrix objects are implemented using single precision 
	% floats, while much of the rest of the breve simulation environment uses 
	% double precision floating point math.

	+ variables:
		matrixPointer (pointer).
		archiveList (list).

	- to get-matrix-pointer:
		return matrixPointer.

}

Matrix : Matrix2D (aka Matrices2D) {

	+ variables:
		xDim, yDim (int).

	+ to destroy:
		if matrixPointer: matrix2DFree( matrixPointer ).
	
	+ section "Setting the Matrix Size"
	
	+ to init-with x-size xSize (int) y-size ySize (int):
		% sets the size to of this matrix to (sSize, ySize).
		self set-size x xSize y ySize.
		return self.
		
	+ to set-size x xSize (int) y ySize (int):
		% Sets the size of this matrix to (xSize, ySize).		
		if matrixPointer: matrix2DFree(matrixPointer).
		matrixPointer = matrix2DNew(xSize, ySize).
		xDim = xSize.
		yDim = ySize.
		
	- to set-matrix-pointer to newPointer (pointer)
							x-size xSize (int)
							y-size ySize (int):
		if matrixPointer: matrix2DFree(matrixPointer).
		matrixPointer = newPointer.
		xDim = xSize.
		yDim = ySize.
		
	+ section "Methods to Get and Set Values"

	+ to get-x-dimension:
		% Returns the x size of this matrix.
		return xDim.
		
	+ to get-y-dimension:
		% Returns the y size of this matrix.
		return yDim.
		
	+ to set-all-values to value (float):
		% Sets all of the values in the matrix to value.

		matrix2DSetAll(matrixPointer, value).

	+ to get-value at-x x (int) at-y y (int):
		% Returns the matrix value at position (x, y).

		return matrix2DGet(matrixPointer, x, y).

	+ to set-value to value (double) at-x x (int) at-y y (int):
		% Sets the matrix value at position (x, y).

		return matrix2DSet(matrixPointer, x, y, value).

	+ section "Matrix Match Methods"
	
	+ to get-absolute-sum:
		% Returns the sum of the absolute values of all elements in this 
		% matrix.
		% <P>
		% This method is hardware accelerated where supported.

		return matrix2DGetAbsoluteSum(matrixPointer).

	+ to multiply-with-values of otherMatrix (Matrix2D object):
		% Multiplies each element in this matrix with the corresponding 
		% element in otherMatrix.  This is not regular matrix multiplication;
		% rather, it is a way to scale each element in otherMatrix.

		matrix2DMulElements(matrixPointer, (otherMatrix get-matrix-pointer)).

	+ to transform with-matrix transformation (Matrix2D object) with-result result (Matrix2D object):
		% Transforms this OBJECT(Matrix2D) with the OBJECT(Matrix2D) matrix, storing the
		% output in result.

		matrix2DMatrixMultiply( (transformation get-matrix-pointer), matrixPointer, (result get-matrix-pointer) ).

	+ to add-scalar value scalarValue (double):
		% Adds the number scalarValue to each element in the matrix.
		
		matrix2DAddScalar(matrixPointer, scalarValue).

	+ to add-values of otherMatrix (object) scaled-by scale = 1.0 (double):
		% Adds this matrix to otherMatrix leaving the result in otherMatrix.
		% The matrices must be of the same size.  The 
		% optional argument scale allows otherMatrix to be scaled before 
		% adding it to this matrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrix2DAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), scale).

	+ to scale by scaleValue (float):
		% Scales all elements in the matrix by scaleValue.
		% <P>
		% This method is hardware accelerated where supported.

		matrix2DScale(matrixPointer, scaleValue).

	+ to copy from otherMatrix (object):
		% Copies the contents of otherMatrix to thisMatrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrix2DCopy((otherMatrix get-matrix-pointer), matrixPointer).

	+ to subtract-values of otherMatrix (object) scaled-by scale = 1.0 (double):
		% Subtracts this matrix from this otherMatrix, leaving the result
		% in otherMatrix.  This method uses the
		% same mechanism as METHOD(add), but using a negative scale 
		% argument.
		% The optional argument scale allows otherMatrix to be scaled before 
		% subtracting it from this matrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrix2DAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), -1.0 * scale).

	+ to compute-periodic-diffusion-matrix from chemicalMatrix (object) with-scale scale = 1.0 (float):
		% Sets the contents of this matrix to a diffusion rate from the matrix
		% chemicalMatrix.  chemicalMatrix is treated as a matrix of spatial 
		% chemical concentrations, and the resulting diffusion matrix gives the 
		% approximate rates of diffusion of the chemical.
		% <P>
		% This is done by sampling each concentration's local neighborhood 
		% according to the following matrix:
		% <pre>
		% 0 1 0
		% 1 -4 1
		% 0 1 0
		% </pre>
		% <P>
		% chemicalMatrix is assumed to have periodic boundary conditions so that	 
		% the chemical will flow freely from the edges of the matrix to the 
		% other side.
		% <P>
		% The optional scale argument may be used to scale the resulting scale 
		% matrix.

		matrix2DDiffusePeriodic((chemicalMatrix get-matrix-pointer), matrixPointer, scale).

	+ to compute-diffusion-matrix from chemicalMatrix (object) with-scale scale = 1.0 (float):
		% Sets the contents of this matrix to a diffusion rate from the matrix
		% chemicalMatrix.  chemicalMatrix is treated as a matrix of spatial 
		% chemical concentrations, and the resulting diffusion matrix gives the 
		% approximate rates of diffusion of the chemical.
		% <P>
		% This is done by sampling each concentration's local neighborhood 
		% according to the following matrix:
		% <pre>
		% 0 1 0
		% 1 -4 1
		% 0 1 0
		% </pre>
		% <P>
		% chemicalMatrix is assumed to have real boundary conditions so that	 
		% the chemical will not flow beyond the edges of the matrix.
		% <P>
		% The optional scale argument may be used to scale the resulting scale 
		% matrix.

		matrix2DDiffuse((chemicalMatrix get-matrix-pointer), matrixPointer, scale).

	+ section "Methods for using Displaying Matrices"
	
	+ to copy-to-red-channel of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the red channel of theImage.  
		% The optional
		% argument scale specifies how the matrix elements should be scaled.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-green-channel) and 
		% METHOD(copy-to-blue-channel) are far faster than looping manually through
		% the matrix values.

		matrix2DCopyToImage(matrixPointer, (theImage get-image-data), 0, scale).

	+ to copy-to-green-channel of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the green channel of theImage.  
		% The optional
		% argument scale specifies how the matrix elements should be scaled.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-blue-channel) and 
		% METHOD(copy-to-red-channel) are far faster than looping manually through
		% the matrix values.

		matrix2DCopyToImage(matrixPointer, (theImage get-image-data), 1, scale).

	+ to copy-to-blue-channel of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the blue channel of theImage.  
		% The optional
		% argument scale specifies how the matrix elements should be scaled.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-red-channel) and 
		% METHOD(copy-to-green-channel) are far faster than looping manually through
		% the matrix values.

		matrix2DCopyToImage(matrixPointer, (theImage get-image-data), 2, scale).
		
	+ to print-matlab-style:
		% Prints the matrix in a style similar to MATLAB.

		i, j (int).
		printf "[".
		for i = 0, i < (xDim - 1), i++:
		{
			for j = 0, j < (yDim - 1), j++:
			{
				printf matrix2DGet(matrixPointer, i, j).
				printf " ".
			}
			printf matrix2DGet(matrixPointer, i, j).
			print ";".
			printf " ".
		}
		for j = 0, j < (yDim - 1), j++:
		{
			printf matrix2DGet(matrixPointer, i, j).
			printf " ".
		}
		printf matrix2DGet(matrixPointer, i, j).
		print "]".			   

	+ to archive:
		x, y (int).

		for y = 0, y < yDim, y++: {
			archiveList{ y } = {}.
			for x = 0, x < xDim, x++: {
				archiveList{ y }{ x } = ( self get-value at-x x at-y y ).
			}
		}

		return (super archive).

	+ to dearchive:
		x, y (int).

		self set-size y | archiveList | x | archiveList{ 0 } |.

		for y = 0, y < yDim, y++: {
			for x = 0, x < xDim, x++: {
				self set-value at-x x at-y y to archiveList{ y }{ x }.
			}
		}

		return (super dearchive).

	+ to get-max-value:
	     return matrix2DGetMax(matrixPointer).
}

Matrix : Matrix3D (aka Matrices3D) {
	% Matrix3D objects store an arbitrary sized 3D grid of arbitrary floating 
	% point data.
	% <P>
	% Several of these matrix operations are built on top of the BLAS library
	% and may be hardware accelerated on certain processors if the platform
	% provides a hardware accelerated BLAS library.  In particular, AltiVec 
	% acceleration is provided on G4 an G5 processors with Mac OS X.  
	% <P>
	% Hardware accelerated methods sometimes preform multiple operations 
	% simultaneously for the same computational cost.  The METHOD(add)
	% operation, for example, also scales one of the matrices being added.
	% When using these methods, it is often beneficial to structure code
	% to take advantage of all of the operations preformed.  It is far 
	% more efficient to scale and add a matrix simultaneously using METHOD(add)
	% than to first scale using METHOD(scale) and then add using METHOD(add).
	% <P>
	% Technical note: matrix objects are implemented using single precision 
	% floats, while much of the rest of the breve simulation environment uses 
	% double precision floating point math.

	+ variables:
		xDim, yDim, zDim (int).

	+ to destroy:
		if matrixPointer: matrix3DFree( matrixPointer ).
		
	+ to init-with x-size xSize (int) y-size ySize (int) z-size zSize (int): 
		% sets the size to of this matrix to (sSize, ySize, zSize).
		self set-size x xSize y ySize z zSize.
		xDim = xSize.
		yDim = ySize.
		zDim = zSize.
		
		return self.
		
	+ to set-size x xSize (int) y ySize (int) z zSize (int):
		% Sets the size of this matrix to (xSize, ySize, zSize).

		if matrixPointer: matrix2DFree(matrixPointer).
		matrixPointer = matrix3DNew(xSize, ySize, zSize).

	+ to get-absolute-sum:
		% Returns the sum of the absolute values of all elements in this 
		% matrix.
		% <P>
		% This method is hardware accelerated where supported.

		return matrix3DGetAbsoluteSum(matrixPointer).

	+ to multiply-with-values of otherMatrix (Matrix3D object):
		% Multiplies each element in this matrix with the corresponding 
		% element in otherMatrix.  This is not regular matrix multiplication;
		% rather, it is a way to scale each element in otherMatrix.

		matrix3DMulElements(matrixPointer, (otherMatrix get-matrix-pointer)).

	+ to get-value at-x x (int) at-y y (int) at-z z (int):
		% Returns the matrix value at position (x, y, z).
		
		return matrix3DGet(matrixPointer, x, y, z).

	+ to set-value to value (double) at-x x (int) at-y y (int) at-z z (int):
		% Sets the matrix value at position (x, y, z).

		return matrix3DSet(matrixPointer, x, y, z, value).

	+ to set-all-values to value (float):
		% Sets all of the values in the matrix to value.

		matrix3DSetAll(matrixPointer, value).

	+ to add-scalar value scalarValue (double):
		% Adds the number scalarValue to each element in the matrix.
		
		matrix3DAddScalar(matrixPointer, scalarValue).

	+ to add-values of otherMatrix (object) scaled-by scale = 1.0 (double):
		% Adds this matrix to otherMatrix leaving the result in otherMatrix.
		% The matrices must be of the same size.  The 
		% optional argument scale allows otherMatrix to be scaled before 
		% adding it to this matrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrix3DAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), scale).

	+ to subtract-values of otherMatrix (object) scaled-by scale = 1.0 (double):
		% Subtracts this matrix from this otherMatrix, leaving the result
		% in otherMatrix.  This method uses the
		% same mechanism as METHOD(add), but using a negative scale 
		% argument.
		% The optional argument scale allows otherMatrix to be scaled before 
		% subtracting it from this matrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrix3DAddScaled(matrixPointer, (otherMatrix get-matrix-pointer), -1.0 * scale).

	+ to scale by scaleValue (float):
		% Scales all elements in the matrix by scaleValue.
		% <P>
		% This method is hardware accelerated where supported.

		matrix3DScale(matrixPointer, scaleValue).

	+ to copy from otherMatrix (object):
		% Copies the contents of otherMatrix to thisMatrix.
		% <P>
		% This method is hardware accelerated where supported.

		matrix3DCopy((otherMatrix get-matrix-pointer), matrixPointer).

	+ to compute-periodic-diffusion-matrix from chemicalMatrix (object) with-scale scale = 1.0 (float):
		% Sets the contents of this matrix to a diffusion rate from the matrix
		% chemicalMatrix.  chemicalMatrix is treated as a matrix of spatial 
		% chemical concentrations, and the resulting diffusion matrix gives the 
		% approximate rates of diffiusion of the chemical.
		% <P>
		% This is done by sampling each concentration's local neighborhood 
		% according to the following matrix:
		% <pre>
		% 0 0 0  0 1 0  0 0 0
		% 0 1 0  1-6 1  0 1 0
		% 0 0 0  0 1 0  0 0 0
		% </pre>
		% <P>
		% chemicalMatrix is assumed to have periodic boundary conditions so that	 
		% the chemical will flow freely from the edges of the matrix to the 
		% other side.
		% <P>
		% The optional scale argument may be used to scale the resulting scale 
		% matrix.

		matrix3DDiffusePeriodic((chemicalMatrix get-matrix-pointer), matrixPointer, scale).
		
	+ to compute-diffusion-matrix from chemicalMatrix (object) with-scale scale = 1.0 (float):
		% Sets the contents of this matrix to a diffusion rate from the matrix
		% chemicalMatrix.  chemicalMatrix is treated as a matrix of spatial 
		% chemical concentrations, and the resulting diffusion matrix gives the 
		% approximate rates of diffiusion of the chemical.
		% <P>
		% This is done by sampling each concentration's local neighborhood 
		% according to the following matrix:
		% <pre>
		% 0 0 0  0 1 0  0 0 0
		% 0 1 0  1-6 1  0 1 0
		% 0 0 0  0 1 0  0 0 0
		% </pre>
		% <P>
		% chemicalMatrix is assumed to have real boundary conditions so that	 
		% the chemical will not flow beyond the edges of the matrix.
		% <P>
		% The optional scale argument may be used to scale the resulting scale 
		% matrix.

		matrix3DDiffuse((chemicalMatrix get-matrix-pointer), matrixPointer, scale).

	+ section "Copying Slices of the 3D Matrix to Images"
		
	+ to copy-slice-to-red-channel z-plane thePlane (int) of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the red channel of theImage,
		% scaled by the optional scale argument.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-green-channel) and 
		% METHOD(copy-to-blue-channel) are far faster than looping manually through
		% the matrix values.

		matrix3DCopyToImage(matrixPointer, thePlane, (theImage get-image-data), 0, scale).

	+ to copy-sliced-to-green-channel z-plane thePlane (int) of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the green channel of theImage,
		% scaled by the optional scale argument.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-blue-channel) and 
		% METHOD(copy-to-red-channel) are far faster than looping manually through
		% the matrix values.

		matrix3DCopyToImage(matrixPointer, thePlane, (theImage get-image-data), 1, scale).

	+ to copy-slice-to-blue-channel z-plane thePlane (int) of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the blue channel of theImage.  
		% scaled by the optional scale argument.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-red-channel) and 
		% METHOD(copy-to-green-channel) are far faster than looping manually through
		% the matrix values.

		matrix3DCopyToImage(matrixPointer, thePlane, (theImage get-image-data), 2, scale).

	+ to copy-slice-to-alpha-channel z-plane thePlane (int) of-image theImage (Image object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the alpha channel of theImage,
		% scaled by the optional scale argument.
		% <P>
		% This method, and it's counterparts METHOD(copy-to-red-channel) and 
		% METHOD(copy-to-green-channel) are far faster than looping manually through
		% the matrix values.

		matrix3DCopyToImage(matrixPointer, thePlane, (theImage get-image-data), 3, scale).

	+ section "Copying the Contents of the 3D Matrix to PatchGrids"

	+ to copy-to-red-channel of-patch-grid grid (PatchGrid object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the red channel of the OBJECT(PatchGrid),
		% scaled by the optional scale value.

		patchGridCopyColorFrom3DMatrix((grid get-grid-pointer), matrixPointer, 0, scale).

	+ to copy-to-green-channel of-patch-grid grid (PatchGrid object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the green channel of the OBJECT(PatchGrid),
		% scaled by the optional scale value.

		patchGridCopyColorFrom3DMatrix((grid get-grid-pointer), matrixPointer, 1, scale).

	+ to copy-to-blue-channel of-patch-grid grid (PatchGrid object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the blue channel of the OBJECT(PatchGrid),
		% scaled by the optional scale value.

		patchGridCopyColorFrom3DMatrix((grid get-grid-pointer), matrixPointer, 2, scale).

	+ to copy-to-alpha-channel of-patch-grid grid (PatchGrid object) with-scale scale = 1.0 (float):
		% Copies the contents of this matrix to the alpha channel of the OBJECT(PatchGrid),
		% scaled by the optional scale value.

		patchGridCopyColorFrom3DMatrix((grid get-grid-pointer), matrixPointer, 3, scale).


	+ to archive:
		x, y, z (int).

		for z = 0, z < zDim, z++: {
			archiveList{ z } = {}.
			for y = 0, y < yDim, y++: {
				archiveList{ z }{ y } = {}.
				for x = 0, x < xDim, x++: {
					archiveList{ z }{ y }{ x } = ( self get-value at-x x at-y y at-z z ).
				}
			}
		}

		return (super archive).

	+ to dearchive:
		x, y, z (int).

		self set-size z | archiveList | y | archiveList{ 0 } | x | archiveList{ 0 }{ 0 } |.

		for z = 0, z < zDim, z++: {
			for y = 0, y < yDim, y++: {
				for x = 0, x < xDim, x++: {
					self set-value at-x x at-y y at-z z to archiveList{ z }{ y }{ x }.
				}
			}
		}

		return (super dearchive).
}

Image : MatrixImage {
	% The MatrixImage allows three 2D matrices to be copied into the red, green and blue 
	% channels of an image for efficient display.  The image is automatically updated 	
	% with new matrix values at each iteration.

	+ variables:
		red (object).
		green (object).
		blue (object).
		red_scale (float).
		green_scale (float).
		blue_scale (float).
		
	+ to init-with the-matrix theMatrix (object) scale theScale = 1.0 (float):
		% Initializes the MatrixImage with sizes taken from theMatrix.
	
		super init-with width (theMatrix get-x-dimension)
						height (theMatrix get-y-dimension).
		red_scale = theScale.
		green_scale = theScale.
		blue_scale = theScale.

		return self.
		
	+ to set-red to m (Matrix2D object): 
		% Sets the red channel to the matrix m.
		red = m.

	+ to set-green to m (Matrix2D object): 
		% Sets the green channel to the Matrix m.
		green = m.

	+ to set-blue to m (Matrix2D object): 
		% Sets the green channel to the Matrix m.
		blue = m.

	+ to set-scale-to-max-value of theMatrix (object):
		% Sets the scale of this matrix image object to the maximum value in the specified matrix.
		red_scale = 1.0 / (theMatrix get-max-value).
		green_scale = 1.0 / (theMatrix get-max-value).
		blue_scale = 1.0 / (theMatrix get-max-value).

	+ to set-red-scale-to-max-value:
		max (float).

		max = (red get-max-value).

		if max: red_scale = 1.0 / max.
		else:	red_scale = 1.0.

	+ to set-green-scale-to-max-value:
		max (float).

		max = (green get-max-value).

		if max: green_scale = 1.0 / max.
		else:	green_scale = 1.0.

	+ to set-blue-scale-to-max-value:
		max (float).

		max = (blue get-max-value).

		if max: blue_scale = 1.0 / max.
		else:	blue_scale = 1.0.
		
	+ to iterate:
		if red: red copy-to-red-channel of-image self with-scale red_scale.
		if green: green copy-to-green-channel of-image self with-scale green_scale.
		if blue: blue copy-to-blue-channel of-image self with-scale blue_scale.

		super iterate.
		
	- to destroy:
		super destroy.
		
}
